"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[6355],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={slug:"2021-07-03/k3s-cluster-with-vsphere-storage-part-iii",title:"K3S Cluster with vSphere Storage (Part III)",authors:["Peter"],tags:["Rancher","Kubernetes","Storage","K3S","VMWare"],image:"k3s_vsphere_part3.png"},l="K3S Cluster with vSphere Storage [Part III]",i={permalink:"/2021-07-03/k3s-cluster-with-vsphere-storage-part-iii",source:"@site/blog/2021-07-30-k3s-vsphere-part3/index.md",title:"K3S Cluster with vSphere Storage (Part III)",description:"K3S Cluster with vSphere Storage Hero",date:"2021-07-30T00:00:00.000Z",formattedDate:"July 30, 2021",tags:[{label:"Rancher",permalink:"/tags/rancher"},{label:"Kubernetes",permalink:"/tags/kubernetes"},{label:"Storage",permalink:"/tags/storage"},{label:"K3S",permalink:"/tags/k-3-s"},{label:"VMWare",permalink:"/tags/vm-ware"}],readingTime:8.105,hasTruncateMarker:!0,authors:[{name:"Peter Keech",title:"DevOps Engineer",url:"https://github.com/pkeech",imageURL:"https://github.com/pkeech.png",key:"Peter"}],frontMatter:{slug:"2021-07-03/k3s-cluster-with-vsphere-storage-part-iii",title:"K3S Cluster with vSphere Storage (Part III)",authors:["Peter"],tags:["Rancher","Kubernetes","Storage","K3S","VMWare"],image:"k3s_vsphere_part3.png"},prevItem:{title:"K3S Cluster with vSphere Storage (Part II)",permalink:"/2021-07-03/k3s-cluster-with-vsphere-storage-part-ii"},nextItem:{title:"K3S Cluster with vSphere Storage (Part IV)",permalink:"/2021-07-03/k3s-cluster-with-vsphere-storage-part-iv"}},s={authorsImageUrls:[void 0]},p=[{value:"Step 1: Prepare Nodes for vSphere Cloud Provider",id:"step-1-prepare-nodes-for-vsphere-cloud-provider",level:2},{value:"Taint Nodes",id:"taint-nodes",level:3},{value:"Configure Virtual Machine Settings",id:"configure-virtual-machine-settings",level:3},{value:"GOVC Setup",id:"govc-setup",level:3},{value:"Enable DiskUUID",id:"enable-diskuuid",level:3},{value:"Adding ProviderID",id:"adding-providerid",level:3},{value:"Step 2: Install vSphere CPI",id:"step-2-install-vsphere-cpi",level:2},{value:"Step 3: Install vSphere CSI",id:"step-3-install-vsphere-csi",level:2},{value:"Summary",id:"summary",level:2},{value:"References",id:"references",level:2}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:" K3S Cluster with vSphere Storage Hero",src:n(2129).Z,width:"1400",height:"933"})),(0,r.kt)("p",null,"Having followed the steps in Part II, you should have a K3S Cluster stood up. In this Part we are going to add the all important Cloud Provider."),(0,r.kt)("h2",{id:"step-1-prepare-nodes-for-vsphere-cloud-provider"},"Step 1: Prepare Nodes for vSphere Cloud Provider"),(0,r.kt)("p",null,"Before we can install the vSphere Cloud provider, there are couple configurations that need to be applied. You can read more about these requirements by heading over to the ",(0,r.kt)("a",{parentName:"p",href:"https://cloud-provider-vsphere.sigs.k8s.io/"},"VMWare documentation"),"."),(0,r.kt)("h3",{id:"taint-nodes"},"Taint Nodes"),(0,r.kt)("p",null,"The Cloud Provider is going to be installed on the Server (Master) Nodes. To ensure this happens correctly, we need to ensure the nodes are tainted correctly."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Not sure if this is a K3S quirk or just my luck, but additionally I had to reapply the Master and Worker roles to the Nodes for the DaemonSet to recognize the Role.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"## TAINT SERVER (MASTER) NODES\nkubectl taint nodes --selector='node-role.kubernetes.io/master' node-role.kubernetes.io/master=:NoSchedule\n\n## ADD ROLES TO SERVER (MASTER) NODES\nkubectl label nodes --selector='node-role.kubernetes.io/master' node-role.kubernetes.io/master= --overwrite\n\n## TAINT AGENT (WORKER) NODES\nkubectl taint nodes --selector='!node-role.kubernetes.io/master' node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule\n\n## ADD ROLES TO AGENT (WORKER) NODES\nkubectl label nodes --selector='node-role.kubernetes.io/worker' node-role.kubernetes.io/worker= --overwrite\n")),(0,r.kt)("p",null,"Once you have applied the Taints, you can verify they applied successfully by running this command;"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'## VALIDATE TAINTS\nkubectl describe nodes | egrep "Taints:|Name:"\n')),(0,r.kt)("p",null,"If the taints applied successfully you should see all the Server (Master) Nodes with the Taint ",(0,r.kt)("inlineCode",{parentName:"p"},"node-role.kubernetes.io/master:NoSchedule")," and all Agent (Worker) Nodes have the Taint ",(0,r.kt)("inlineCode",{parentName:"p"},"node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule")),(0,r.kt)("h3",{id:"configure-virtual-machine-settings"},"Configure Virtual Machine Settings"),(0,r.kt)("p",null,"Another configuration item that needs to occur, is ensuring that each virtual machine\u2019s hard disk (vmdk) is assigned a unique identifier (UUID). The easiest way to interact with the virtual machine settings is to use a command line utility called ",(0,r.kt)("inlineCode",{parentName:"p"},"govc"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"govc is vSphere CLI provided by VMware and is built on top of govmoi. The CLI is designed to be a user friendly CLI alternative to the GUI and well suited for automation tasks. It also acts as a test harness for the govmomi APIs and provides working examples of how to use the APIs."),(0,r.kt)("p",{parentName:"blockquote"},"\u2013 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vmware/govmomi/tree/master/govc"},(0,r.kt)("em",{parentName:"a"},"Govc Github")))),(0,r.kt)("p",null,"To install the CLI on Mac, you can use Homebrew. To install govc run ",(0,r.kt)("inlineCode",{parentName:"p"},"brew install govc"),". For other operating systems, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vmware/govmomi/tree/master/govc"},"documentation"),"."),(0,r.kt)("h3",{id:"govc-setup"},"GOVC Setup"),(0,r.kt)("p",null,"Before we can use the utility we have to specify how ",(0,r.kt)("inlineCode",{parentName:"p"},"govc")," connects to vSphere. In Mac and Linux, this is accomplished by setting environment variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"## CONFIGURE GOVC\nexport GOVC_URL='{{ URL-FOR-VCSA }}'\nexport GOVC_USERNAME='administrator@vsphere.local'\nexport GOVC_PASSWORD='{{ PASSWORD-FOR-ABOVE-ACCOUNT }}'\nexport GOVC_INSECURE=1\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Variable")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GOVC_URL"),(0,r.kt)("td",{parentName:"tr",align:null},"the URL for your vSphere (VCSA) instance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GOVC_USERNAME"),(0,r.kt)("td",{parentName:"tr",align:null},"the login account for vSphere")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GOVC_PASSWORD"),(0,r.kt)("td",{parentName:"tr",align:null},"the password for the account specified")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GOVC_INSECURE"),(0,r.kt)("td",{parentName:"tr",align:null},"used when self-signed certificates are in use on VCSA, suppresses certificate warnings")))),(0,r.kt)("h3",{id:"enable-diskuuid"},"Enable DiskUUID"),(0,r.kt)("p",null,"At this point you should be able to utilize ",(0,r.kt)("inlineCode",{parentName:"p"},"govc")," to query vSphere. The first command you can run is ",(0,r.kt)("inlineCode",{parentName:"p"},"govc ls"),". This will list the any DataCenters you have configured and folders. You will need to enable DiskUUID on all the virtual machines in the cluster and to do this you will need to know the path to the virtual machine."),(0,r.kt)("p",null,"To find the path use the ",(0,r.kt)("inlineCode",{parentName:"p"},"govc ls")," command followed by a path. Start with leaving it blank and keep drilling down until you find the paths to your virtual machines. For the example below, my final govc command looked like; ",(0,r.kt)("inlineCode",{parentName:"p"},"govc ls /Homelab/vm/Applications/Demo/")),(0,r.kt)("p",null,"Enable DiskUUID on the virtual machines by running the following command. Outline below is how I applied it in my stack."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"## ADD DISK UUID FLAG\ngovc vm.change -e=\"disk.enableUUID=1\" -vm='{{ PATH-TO-VM }}'\n\n## EXAMPLE -- ADD DISK UUID \ngovc vm.change -e=\"disk.enableUUID=1\" -vm='/Homelab/vm/Applications/Demo/MASTER-001'\ngovc vm.change -e=\"disk.enableUUID=1\" -vm='/Homelab/vm/Applications/Demo/MASTER-002'\ngovc vm.change -e=\"disk.enableUUID=1\" -vm='/Homelab/vm/Applications/Demo/MASTER-003'\ngovc vm.change -e=\"disk.enableUUID=1\" -vm='/Homelab/vm/Applications/Demo/WORKER-001'\ngovc vm.change -e=\"disk.enableUUID=1\" -vm='/Homelab/vm/Applications/Demo/WORKER-002'\ngovc vm.change -e=\"disk.enableUUID=1\" -vm='/Homelab/vm/Applications/Demo/WORKER-003'\n")),(0,r.kt)("h3",{id:"adding-providerid"},"Adding ProviderID"),(0,r.kt)("p",null,"The final configuration change needed is to add a \u201cProviderID\u201d to each of the nodes. Reading though the documentation, this ID needs to be unique but can be set to anything (within reason). Borrowing from the documentation, the easiest thing to do is to assign the virtual machine UUID as the ProviderID as these are always unique."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'## ADD PROVIDERID TO EACH NODE\nfor vm in $(govc ls /Homelab/vm/Applications/Demo/); do\nMACHINE_INFO=$(govc vm.info -json -dc=Homelab -vm.ipath="$vm" -e=true)\nVM_NAME=$(jq -r \' .VirtualMachines[] | .Name\' <<< $MACHINE_INFO | awk \'{print tolower($0)}\')\nVM_UUID=$( jq -r \' .VirtualMachines[] | .Config.Uuid\' <<< $MACHINE_INFO | awk \'{print toupper($0)}\')\nkubectl patch node $VM_NAME.dodbrit.lab -p "{\\"spec\\":{\\"providerID\\":\\"vsphere://$VM_UUID\\"}}";\ndone\n')),(0,r.kt)("p",null,"For good measure, you can validate that the ProviderIDs were added correctly by running ",(0,r.kt)("inlineCode",{parentName:"p"},'kubectl describe nodes | egrep "ProviderID:|Name:"'),". The expected outcome should be all of the nodes listed, with a ProviderID that starts with \u201cvsphere\u201d. Additionally, the IDs should all be unique."),(0,r.kt)("h2",{id:"step-2-install-vsphere-cpi"},"Step 2: Install vSphere CPI"),(0,r.kt)("p",null,"Now that we have our cluster up and running, and the nodes configured with additional information, we can finally install the vSphere Cloud Provider."),(0,r.kt)("p",null,"The first step is generate the required configuration file (",(0,r.kt)("inlineCode",{parentName:"p"},"vsphere.conf"),") and credentials (",(0,r.kt)("inlineCode",{parentName:"p"},"cpi-secret.yaml"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-conf",metastring:'title="vsphere.conf"',title:'"vsphere.conf"'},"# vsphere.conf\n\n# Global properties in this section will be used for all specified vCenters unless overriden in VirtualCenter section.\nglobal:\n  # default https port\n  port: 443\n  # set insecureFlag to true if the vCenter uses a self-signed cert\n  insecureFlag: true\n  # settings for using k8s secret\n  secretName: cpi-global-secret\n  secretNamespace: kube-system\n\n# vcenter section\nvcenter:\n  # arbitrary name for cluster\n  demo:\n    # ip or fqdn of vcsa\n    server: 10.0.15.5\n    # vSphere Datacenter Name\n    datacenters:\n      - Homelab\n    # secret with credentials\n    secretName: cpi-secret\n    secretNamespace: kube-system\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="cpi-secret.yaml"',title:'"cpi-secret.yaml"'},'# cpi-secret.yaml\n\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cpi-secret\n  namespace: kube-system\nstringData:\n  10.0.15.5.username: "administrator@vsphere.local"\n  10.0.15.5.password: "{{ PASSWORD-TO-ACCOUNT }}"\n')),(0,r.kt)("p",null,"To apply the vSphere configuration to the cluster, we will create a ConfigMap of the file. To do that you run the following command;"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create configmap cloud-config --from-file=vsphere.conf --namespace=kube-system\n")),(0,r.kt)("p",null,"This will create a ConfigMap in the ",(0,r.kt)("inlineCode",{parentName:"p"},"kube-system")," namespace with all the items we defined. To add the login credentials, we just need to apply the Secret as that was defined as a Secret to begin with."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create -f cpi-secret.yaml\n")),(0,r.kt)("p",null,"Again for peace of mind, we can validate these applied;"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"## ENSURE CONFIGMAP WAS CREATED\nkubectl get configmap cloud-config --namespace=kube-system\n\n## ENSURE SECRET WAS CREATED\nkubectl get secret cpi-secret --namespace=kube-system\n")),(0,r.kt)("p",null,"After you have verified that the ConfigMap and Secret was created, you can delete both of these files. These files have potentially sensitive information in them and its good practice to remove them."),(0,r.kt)("p",null,"Now we can deploy all the components of the vSphere Cloud Provider. We are going to apply them directly from the vSphere GitHub repository."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"It is recommend that you review the files first and once you feel confident that the files are safe, you can then apply them")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"## CREATE ROLES\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/cloud-provider-vsphere/master/manifests/controller-manager/cloud-controller-manager-roles.yaml\n\n## CREATE ROLE BINDINGS\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/cloud-provider-vsphere/master/manifests/controller-manager/cloud-controller-manager-role-bindings.yaml\n\n## CREATE DAMEONSET\nkubectl apply -f https://github.com/kubernetes/cloud-provider-vsphere/raw/master/manifests/controller-manager/vsphere-cloud-controller-manager-ds.yaml\n")),(0,r.kt)("p",null,"And we can check that the Cloud Provider deployed successfully. You should see a ",(0,r.kt)("strong",{parentName:"p"},"vsphere-cloud-controller-manager")," running on each of your master nodes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods --all-namespaces\n")),(0,r.kt)("p",null,"Congratulations! We have just install the vSphere Cloud Provider within our cluster!"),(0,r.kt)("h2",{id:"step-3-install-vsphere-csi"},"Step 3: Install vSphere CSI"),(0,r.kt)("p",null,"Now that the Cloud Provider has been installed, we can turn the attention to the Cloud Storage Interface (CSI). Just like the Cloud Provider, we need to create some configuration files. Modify the file outlined below and save it as ",(0,r.kt)("inlineCode",{parentName:"p"},"csi-vsphere.conf"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-conf",metastring:'title="csi-vsphere.conf"',title:'"csi-vsphere.conf"'},'[Global]\ncluster-id = "k3s-cluster"\nuser = "administrator@vsphere.local"\npassword = "{{ PASSWORD-FOR-ACCOUNT }}"\nport = "443"\ninsecure-flag = "1"\n\n[VirtualCenter "{{ VCSA-IP-ADDRESS }}"]\ndatacenters = "Homelab"\n\n[Workspace]\nserver = "{{ VCSA-IP-ADDRESS }}"\ndatacenter = "Homelab"\ndefault-datastore = "{{ DEFAULT-VSPHERE-DATASTORE }}"\nresourcepool-path = "{{ DATACENTER-NAME }}/Resources"\nfolder = "kubernetes"\n\n[Disk]\nscsicontrollertype = pvscsi\n')),(0,r.kt)("p",null,"The default-datastore field in the configuration file is important enough that it is included in the file, but will not be used once we configure the Storage Class. The Storage Class grants us the ability to define where the persistent storage will be save. Additionally, multiple Storage Class\u2018s can be defined that will allow for more granular storage based upon the deployment."),(0,r.kt)("p",null,"Unlike CPI, we are going to upload this configuration to Kubernetes via a Secret."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret generic vsphere-config-secret --from-file=csi-vsphere.conf --namespace=kube-system\n")),(0,r.kt)("p",null,"When then validate that the Secret created successfully \u2026"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret vsphere-config-secret --namespace=kube-system\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"At this point, you made delete csi-vsphere.conf as it contains sensitive information.")),(0,r.kt)("p",null,"Now we can deploy all the components of the vSphere Storage Provider. We are going to apply them directly from the vSphere GitHub repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"## DEFINE CLUSTER ROLES\nkubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/vsphere-csi-driver/v2.2.0/manifests/v2.2.0/rbac/vsphere-csi-controller-rbac.yaml\n\n## DEFINE ROLE BINDINGS\nkubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/vsphere-csi-driver/v2.2.0/manifests/v2.2.0/rbac/vsphere-csi-node-rbac.yaml\n\n## DEPLOY STORAGE DRIVERS (CONTROLLER)\nkubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/vsphere-csi-driver/v2.2.0/manifests/v2.2.0/deploy/vsphere-csi-controller-deployment.yaml\n\n## DEPLOY STORAGE DRIVERS (DAMEONSET)\nkubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/vsphere-csi-driver/v2.2.0/manifests/v2.2.0/deploy/vsphere-csi-node-ds.yaml\n")),(0,r.kt)("p",null,"We can then validate the installation by checking the Pod deployment. It may take a few minutes for all of the pods to get created and start running."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods --namespace=kube-system\n")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"At this point, and ensuring that everything went smoothly, you should have a Kubernetes cluster running with both vSphere CPI and CSI running and configured. In Part IV of this blog, we are going to define the storage class within the cluster and deploy a demo application."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://longhorn.io/"},"Rancher Labs Longhorn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://cloud-provider-vsphere.sigs.k8s.io/"},"vSphere Cloud Provider")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://vsphere-csi-driver.sigs.k8s.io/"},"vSphere Storage Provider")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://rancher.com/docs/k3s/latest/en/"},"Rancher Labs K3S")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/architecture/cloud-controller/"},"Kuberenetes Cloud Controllers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://vmware.github.io/photon/docs/"},"VMware Photon OS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://nginx.org/en/docs/http/load_balancing.html"},"NGINX Load Balancer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vmware/govmomi/tree/master/govc"},"Govc Documentation"))))}u.isMDXComponent=!0},2129:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/k3s_vsphere_part3-603a59da1b815db7f979bf59aed9111a.png"}}]);