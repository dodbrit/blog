<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kubernetes on DODBRIT</title><link>https://dodbrit.io/tags/kubernetes/</link><description>Recent content in Kubernetes on DODBRIT</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 13 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dodbrit.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Helm Update</title><link>https://dodbrit.io/posts/simple-helm-update/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://dodbrit.io/posts/simple-helm-update/</guid><description>Problem &amp;ldquo;Helm helps you manage Kubernetes applications — Helm Charts help you define, install, and upgrade even the most complex Kubernetes application. Charts are easy to create, version, share, and publish — so start using Helm and stop the copy-and-paste.&amp;rdquo; &amp;ndash; Helm
Helm Charts are a fantastic tool to utilize if you are distributing your complex applications to a wide audience. However, it starts to become a chore to manage as the number of Applications(Charts) and Clusters increase.</description></item><item><title>Terminating Namespaces</title><link>https://dodbrit.io/posts/2021-10-29/terminating-namespaces/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://dodbrit.io/posts/2021-10-29/terminating-namespaces/</guid><description>After you start playing around with Kubernetes, or even Red Hat OpenShift, you are potentially going to run into an issue that I’ve had to encounter many times. Sometimes it happens quickly, other times it takes longer, but eventually you will run into the issue of a namespace trying to terminate but appear to be stuck.
The TLDR of this issue, is that the Kubernetes Finalizer of the namespace fails to complete successfully leaving you with a namespace that is “terminating”.</description></item><item><title>K3s Cluster With Vsphere Storage [Part IV]</title><link>https://dodbrit.io/posts/2021-07-03/k3s-cluster-with-vsphere-storage-part-iv/</link><pubDate>Sat, 03 Jul 2021 03:00:00 +0000</pubDate><guid>https://dodbrit.io/posts/2021-07-03/k3s-cluster-with-vsphere-storage-part-iv/</guid><description>Having followed along with the previous three blog posts, you should have a cluster that is one small step away from demonstrating the storage capabilities. In this final part of the series, we will perform our final configurations and demonstrate the simplicity of our storage solution.
Note
At the end of this post, your cluster isn’t quite ready for a workload as it is still missing an Ingress Controller. While deploying an Ingress Controller is outside the scope of this post, I will briefly describe how to deploy NGINX as an IngressController at the end of this post to get you started.</description></item><item><title>K3s Cluster With Vsphere Storage [Part III]</title><link>https://dodbrit.io/posts/2021-07-03/k3s-cluster-with-vsphere-storage-part-iii/</link><pubDate>Sat, 03 Jul 2021 02:00:00 +0000</pubDate><guid>https://dodbrit.io/posts/2021-07-03/k3s-cluster-with-vsphere-storage-part-iii/</guid><description>Having followed the steps in Part II, you should have a K3S Cluster stood up. In this Part we are going to add the all important Cloud Provider.
Step 1: Prepare Nodes for vSphere Cloud Provider Before we can install the vSphere Cloud provider, there are couple configurations that need to be applied. You can read more about these requirements by heading over to the VMWare documentation.
Taint Nodes The Cloud Provider is going to be installed on the Server (Master) Nodes.</description></item><item><title>K3s Cluster With Vsphere Storage [Part II]</title><link>https://dodbrit.io/posts/2021-07-03/k3s-cluster-with-vsphere-storage-part-ii/</link><pubDate>Sat, 03 Jul 2021 01:00:00 +0000</pubDate><guid>https://dodbrit.io/posts/2021-07-03/k3s-cluster-with-vsphere-storage-part-ii/</guid><description>Continuing on the discussion from Part I, in this part we are going to deploy a K3S cluster on a vSphere environment.
Step 1: The Setup Note
I’m currently in the process of creating Terraform scripts to accomplish this deployment, but feel free to deploy you cluster per your favorite method. I will create a blog post describing my Terraform scripts and the headache that PhotonOS caused once I’ve completed the Terraform Script.</description></item><item><title>K3s Cluster With Vsphere Storage [Part I]</title><link>https://dodbrit.io/posts/2021-07-03/k3s-cluster-with-vsphere-storage-part-i/</link><pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate><guid>https://dodbrit.io/posts/2021-07-03/k3s-cluster-with-vsphere-storage-part-i/</guid><description>Whether you work in an environment that utilizes VMware products, you have a VMware Homelab or you just want to learn something different for Kubernetes Storage this post is for you.
When deploying a highly available Kubernetes cluster, distributed storage becomes a thorn in your side. Just like every other Cloud Native tool, there are a number of solutions out there; Rancher Lab’s Longhorn and GlusterFS just to name two. However, did you know, starting with vSphere 6.</description></item><item><title>Day One</title><link>https://dodbrit.io/posts/day-one/</link><pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate><guid>https://dodbrit.io/posts/day-one/</guid><description>Good afternoon and happy Friday! Thanks to the wonderful Network Chuck, today is day one of this website. As a beginning post I thought I would start with a free DevOps certification.
Note
As a quick update, I have successfully passed the Rancher Operator: Level One!
As I previously mentioned, despite the fact that this is a Rancher certificate that is obviously geared towards the Rancher product, I highly recommend this certification for anyone that is new to the Kubernetes world or needs a refresher for the matter.</description></item></channel></rss>